// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name UXFeedbackSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import CoreData
import CoreTelephony
import DeveloperToolsSupport
import Foundation
import Foundation.NSURLRequest
import Photos
import PhotosUI
import QuartzCore
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
@_exported import UXFeedbackSDK
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objcMembers public class UXFBAttributesBuilder : UXFeedbackSDK.AttributesBuilder {
  @objc override public init()
  @objc deinit
}
extension Swift.String {
  public var argb2rgba: Swift.String? {
    get
  }
}
@objc public protocol UXFeedbackCampaignDelegate : UXFeedbackSDK.FeedbackCampaignDelegate {
  @objc func campaignDidLoad(success: Swift.Bool)
  @objc func campaignDidReceiveError(errorString: Swift.String)
  @objc func campaignDidShow(campaignId: Swift.String, eventName: Swift.String)
  @objc func campaignDidClose(campaignId: Swift.String, eventName: Swift.String)
  @objc func campaignDidTerminate(campaignId: Swift.String, eventName: Swift.String, terminatedPage: Swift.Int, totalPages: Swift.Int)
  @objc func campaignDidSend(campaignId: Swift.String)
  @objc func campaignDidAnswered(campaignId: Swift.String, answers: [Swift.String : Any])
}
@objc public protocol UXFeedbackLogDelegate : UXFeedbackSDK.FeedbackLogDelegate {
  @objc func logDidReceive(message: Swift.String)
}
@objc extension UIKit.UIColor {
  @objc convenience dynamic public init(hex3: Swift.UInt16, alpha: CoreFoundation.CGFloat = 1)
  @objc convenience dynamic public init(hex4: Swift.UInt16)
  @objc convenience dynamic public init(hex6: Swift.UInt32, alpha: CoreFoundation.CGFloat = 1)
  @objc convenience dynamic public init(hex8: Swift.UInt32)
  @objc convenience dynamic public init(rgba_throws rgba: Swift.String) throws
  @objc convenience dynamic public init(_ rgba: Swift.String, defaultColor: UIKit.UIColor = UIColor.clear)
  @objc dynamic public func hexStringThrows(_ includeAlpha: Swift.Bool = true) throws -> Swift.String
  @objc dynamic public func hexString(_ includeAlpha: Swift.Bool = true) -> Swift.String
}
extension UIKit.UIAlertController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func dismiss(animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers open class UXFeedback : ObjectiveC.NSObject {
  @objc public static let sdk: UXFeedbackSDK.UXFeedback
  @objc final public let version: Swift.String
  @objc weak open var campaignDelegate: (any UXFeedbackSDK.FeedbackCampaignDelegate)?
  @objc weak open var logDelegate: (any UXFeedbackSDK.FeedbackLogDelegate)?
  @objc open var settings: UXFeedbackSDK.UXFBSettings
  @objc open var theme: UXFeedbackSDK.UXFBTheme
  @objc open var properties: [Swift.String : Any] {
    @objc get
    @objc set
  }
  @objc deinit
  @objc public static func setup(appID: Swift.String, settings: UXFeedbackSDK.UXFBSettings, campaignDelegate: (any UXFeedbackSDK.FeedbackCampaignDelegate)? = nil, logDelegate: (any UXFeedbackSDK.FeedbackLogDelegate)? = nil)
  open func startCampaign(eventName: Swift.String, attributes: [UXFeedbackSDK.Attribute]? = nil)
  @objc open func stopCampaign()
}
@objc @_inheritsConvenienceInitializers @objcMembers open class UXFBSettings : ObjectiveC.NSObject {
  @objc open var sdkPlatform: Swift.String?
  @objc open var sdkPlatformVersion: Swift.String?
  @objc open var globalDelayTimer: Swift.Int
  @objc open var closeOnSwipe: Swift.Bool
  @objc open var debugEnabled: Swift.Bool
  @objc open var fieldsEventEnabled: Swift.Bool
  @objc open var retryTimeout: Swift.Double
  @objc open var retryCount: Swift.Int
  @objc open var socketTimeout: Swift.Double
  @objc open var slideInUiBlocked: Swift.Bool
  @objc open var slideInUiBlackoutColor: Swift.String?
  @objc open var slideInUiBlackoutOpacity: Swift.Int
  @objc open var slideInUiBlackoutBlur: Swift.Int
  @objc open var popupUiBlackoutColor: Swift.String?
  @objc open var popupUiBlackoutOpacity: Swift.Int
  @objc open var popupUiBlackoutBlur: Swift.Int
  @objc open var endpoint: Swift.String?
  @objc open var rotateToggle: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_documentation(visibility: internal) public struct NetworkSettings {
}
public enum AttributeDecodable : Swift.Decodable {
  case string(Swift.String)
  case int(Swift.Int)
  case double(Swift.Double)
  public init(from decoder: any Swift.Decoder) throws
  public func getString() -> Swift.String?
  public func getNumber() -> Foundation.NSNumber?
}
public struct CampaignAttribute : Swift.Decodable {
  public var attributeName: Swift.String
  public var value: UXFeedbackSDK.AttributeDecodable?
  public var rule: Swift.String
  public var valueFrom: UXFeedbackSDK.AttributeDecodable?
  public var valueTo: UXFeedbackSDK.AttributeDecodable?
  public init(from decoder: any Swift.Decoder) throws
}
public struct Attribute {
  public var attributeName: Swift.String
  public var attributeValue: (any Swift.Decodable & Swift.Encodable)?
}
public struct CheckAttribute : Swift.Codable {
  public let checkAttributes: Swift.Bool
  public let attributes: [Swift.String : Swift.Bool]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class AttributesBuilder {
  public init()
  public func addValue(_ name: Swift.String, value: Swift.String) -> UXFeedbackSDK.AttributesBuilder
  public func addValue(_ name: Swift.String, value: Swift.Int) -> UXFeedbackSDK.AttributesBuilder
  public func addValue(_ name: Swift.String, value: Swift.Double) -> UXFeedbackSDK.AttributesBuilder
  public func addValue(_ name: Swift.String, value: Foundation.Date) -> UXFeedbackSDK.AttributesBuilder
  public func addValue(_ name: Swift.String, value: Swift.Bool) -> UXFeedbackSDK.AttributesBuilder
  public func remove(attributeName: Swift.String) -> UXFeedbackSDK.AttributesBuilder
  public func build() -> [UXFeedbackSDK.Attribute]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers open class UXFBTheme : ObjectiveC.NSObject {
  @objc open var text03Color: UIKit.UIColor
  @objc open var inputBorderColor: UIKit.UIColor
  @objc open var iconColor: UIKit.UIColor
  @objc open var btnBgColorActive: UIKit.UIColor
  @objc open var btnBorderRadius: CoreFoundation.CGFloat
  @objc open var errorColorSecondary: UIKit.UIColor
  @objc open var errorColorPrimary: UIKit.UIColor
  @objc open var mainColor: UIKit.UIColor
  @objc open var controlBgColorActive: UIKit.UIColor
  @objc open var formBorderRadius: CoreFoundation.CGFloat
  @objc open var inputBgColor: UIKit.UIColor
  @objc open var text01Color: UIKit.UIColor
  @objc open var controlBgColor: UIKit.UIColor
  @objc open var controlIconColor: UIKit.UIColor
  @objc open var btnBgColor: UIKit.UIColor
  @objc open var text02Color: UIKit.UIColor
  @objc open var btnTextColor: UIKit.UIColor
  @objc open var bgColor: UIKit.UIColor
  @objc open var iconRating: UIKit.UIColor
  @objc open var fontH1: UIKit.UIFont
  @objc open var fontH2: UIKit.UIFont
  @objc open var fontP1: UIKit.UIFont
  @objc open var fontP2: UIKit.UIFont
  @objc open var fontBtn: UIKit.UIFont
  @objc override dynamic public init()
  @objc deinit
}
@objc @_documentation(visibility: internal) public protocol FeedbackCampaignDelegate {
  @objc func campaignDidLoad(success: Swift.Bool)
  @objc func campaignDidReceiveError(errorString: Swift.String)
  @objc func campaignDidShow(campaignId: Swift.String, eventName: Swift.String)
  @objc func campaignDidClose(campaignId: Swift.String, eventName: Swift.String)
  @objc func campaignDidTerminate(campaignId: Swift.String, eventName: Swift.String, terminatedPage: Swift.Int, totalPages: Swift.Int)
  @objc func campaignDidSend(campaignId: Swift.String)
  @objc func campaignDidAnswered(campaignId: Swift.String, answers: [Swift.String : Any])
}
@objc @_documentation(visibility: internal) public protocol FeedbackLogDelegate {
  @objc func logDidReceive(message: Swift.String)
}
